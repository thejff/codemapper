digraph test {

subgraph clustersrc {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
subgraph clusterapp {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
subgraph clustercomponents {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
subgraph clustercontracts {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
contractscomponentts[label="contracts.component.ts"];
contractscomponentts -> {editcontractscomponent, contractservice}


	label="contracts";
	style=rounded;

}

subgraph clusterhome {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
	homecomponentts[label="home.component.ts"];
	homecomponentts -> {generalservice, quickbarcomponent, dialogservice}


	label="home";
	style=rounded;

}

subgraph clusteridentity {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
		identitycomponentts[label="identity.component.ts"];
		identitycomponentts -> {keyservice, ledgerservice, identityservice, dialogservice, namespaceservice, connectionstructures, keystructures, namespacestructures, identitystructure, identityinterfaces, connectioninterfaces, keyinterfaces, namespaceinterfaces}


	label="identity";
	style=rounded;

}

subgraph clusterkeys {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
			keyscomponentts[label="keys.component.ts"];
			keyscomponentts -> {quickbarcomponent, blockeddialogcomponent, keyservice, dialogservice, keystructures, keyinterfaces}


	label="keys";
	style=rounded;

}

subgraph clusternamespace {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
				namespacecomponentts[label="namespace.component.ts"];
				namespacecomponentts -> {namespaceservice, ledgerservice, generalservice, dialogservice, identityservice, quickbarcomponent, namespacestructures, identitystructure, identityinterfaces, namespaceinterfaces}


	label="namespace";
	style=rounded;

}

subgraph clustersettings {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
					settingscomponentts[label="settings.component.ts"];
					settingscomponentts -> {quickbarcomponent, connectionscomponent, defaultscomponent}


	label="settings";
	style=rounded;

}

subgraph clustersigning {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
						signingcomponentts[label="signing.component.ts"];
						signingcomponentts -> {keyservice, keyinterfaces}


	label="signing";
	style=rounded;

}

subgraph clusterswagger {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
							swaggercomponentts[label="swagger.component.ts"];
							swaggercomponentts -> {ledgerservice, connectionstructures}


	label="swagger";
	style=rounded;

}


	label="components";
	style=rounded;

}

subgraph clusterdirectives {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
	webviewdirectivets[label="webview.directive.ts"];
	webviewdirectivets -> {}


	label="directives";
	style=rounded;

}

subgraph clusterproviders {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
		databaseservicets[label="database.service.ts"];
		databaseservicets -> {electronservice, workspaceinterfaces, settingsstructures}

		electronservicets[label="electron.service.ts"];
		electronservicets -> {}

		saveservicets[label="save.service.ts"];
		saveservicets -> {savecontractdialogcomponent, contractservice, dialogservice, contractstructures, errorsclasses, dialoginterfaces, workflowinterfaces, contractinterfaces}

		uploadservicets[label="upload.service.ts"];
		uploadservicets -> {ledgerservice, dialogservice, contractstructures, errorsclasses, connectioninterfaces, identityinterfaces, namespaceinterfaces, contractinterfaces, namespaceservice}


	label="providers";
	style=rounded;

}

subgraph clustershared {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
			subgraph clusterclasses {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
			errorsclassests[label="errors.classes.ts"];
			errorsclassests -> {}


				label="classes";
				style=rounded;

			}

			subgraph clustercomponents2 {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
				subgraph clusterconsole {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
				consolecomponentts[label="console.component.ts"];
				consolecomponentts -> {consoleservice, electronservice, generalservice}


					label="console";
					style=rounded;

				}

				subgraph clustereditcontracts {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
					editcontractscomponentts[label="edit-contracts.component.ts"];
					editcontractscomponentts -> {monacoeditorcomponent, dataservice, generalservice, electronservice, saveservice, quickbarcomponent, dialogservice, fileservice, contractstructures, errorsclasses, workflowservice, contractinterfaces, contractservice}


					label="edit-contracts";
					style=rounded;

				}

				subgraph clusterinfocontracts {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
						infocontractscomponentts[label="info-contracts.component.ts"];
						infocontractscomponentts -> {contractservice, ledgerservice, namespaceservice, quickbarcomponent, dialogservice, contractstructures, connectionstructures, namespacestructures, transactionstructures, identityinterfaces, namespaceinterfaces, identityservice, identitystructure}


					label="info-contracts";
					style=rounded;

				}

				subgraph clustermonacoeditor {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
							monacoeditorcomponentts[label="monaco-editor.component.ts"];
							monacoeditorcomponentts -> {electronservice}


					label="monaco-editor";
					style=rounded;

				}

				subgraph clusterquickbar {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
								quickbarcomponentts[label="quick-bar.component.ts"];
								quickbarcomponentts -> {electronservice, generalservice, databaseservice, dialogservice, workspaceinterfaces, userinterfaces, userservice}


					label="quick-bar";
					style=rounded;

				}

				subgraph clusterruncontracts {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
									runcontractscomponentts[label="run-contracts.component.ts"];
									runcontractscomponentts -> {namespaceservice, ledgerservice, dataservice, keyservice, generalservice, quickbarcomponent, electronservice, dialogservice, connectionstructures, namespacestructures, defaultstructures, contractstructures, identityservice, identitystructure, identityinterfaces, namespaceinterfaces, keyinterfaces, connectioninterfaces, defaultinterfaces}


					label="run-contracts";
					style=rounded;

				}

				subgraph clustersettings2 {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
										subgraph clusterabout {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
										aboutcomponentts[label="about.component.ts"];
										aboutcomponentts -> {version, apiservice, electronservice, workflowservice}


											label="about";
											style=rounded;

										}

										subgraph clusteraccount {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
											accountcomponentts[label="account.component.ts"];
											accountcomponentts -> {dialogservice, userinterfaces, userservice, userstructure, electronservice, apiservice}


											label="account";
											style=rounded;

										}

										subgraph clusterbackup {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
												backupcomponentts[label="backup.component.ts"];
												backupcomponentts -> {backupservice, electronservice, dialogservice}


											label="backup";
											style=rounded;

										}

										subgraph clusterconnections {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
													connectionscomponentts[label="connections.component.ts"];
													connectionscomponentts -> {ledgerservice, connectionstructures}


											label="connections";
											style=rounded;

										}

										subgraph clusterdefaults {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
														defaultscomponentts[label="defaults.component.ts"];
														defaultscomponentts -> {ledgerservice, defaultsservice, namespaceservice, namespacestructures, defaultstructures, identityinterfaces, identityservice, generalservice, connectioninterfaces, defaultinterfaces, namespaceinterfaces}


											label="defaults";
											style=rounded;

										}

										subgraph clusterdeveloper {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
															developercomponentts[label="developer.component.ts"];
															developercomponentts -> {databaseservice, electronservice, dialogservice, workspaceinterfaces, userservice}


											label="developer";
											style=rounded;

										}

										subgraph clustergeneral {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
																generalcomponentts[label="general.component.ts"];
																generalcomponentts -> {generalservice, settingsstructures}


											label="general";
											style=rounded;

										}

										subgraph clusterrestore {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
																	restorecomponentts[label="restore.component.ts"];
																	restorecomponentts -> {electronservice, backupservice, dialogservice}


											label="restore";
											style=rounded;

										}

										subgraph clusterupdate {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
																		updatecomponentts[label="update.component.ts"];
																		updatecomponentts -> {}


											label="update";
											style=rounded;

										}

										subgraph clusterworkspace {
																						node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
																			workspacecomponentts[label="workspace.component.ts"];
																			workspacecomponentts -> {databaseservice, dialogservice, electronservice, workspaceinterfaces}


											label="workspace";
											style=rounded;

										}


					label="settings";
					style=rounded;

				}

				subgraph clusterworkflowcontracts {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
											workflowcontractscomponentts[label="workflow-contracts.component.ts"];
											workflowcontractscomponentts -> {workflowinterfaces, workflowservice, contractservice, identityinterfaces, identityservice, contractinterfaces, uploadservice}


					label="workflow-contracts";
					style=rounded;

				}

				subgraph clusterworkflowcreate {
										node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
												workflowcreatecomponentts[label="workflow-create.component.ts"];
												workflowcreatecomponentts -> {workflowstructures, identityservice, identityinterfaces, workflowservice, workflowinterfaces}


					label="workflow-create";
					style=rounded;

				}


				label="components";
				style=rounded;

			}

			subgraph clusterdialogs {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
					subgraph clusteradvancedconfirmdialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
					advancedconfirmdialogcomponentts[label="advanced-confirm-dialog.component.ts"];
					advancedconfirmdialogcomponentts -> {}


						label="advanced-confirm-dialog";
						style=rounded;

					}

					subgraph clusterblockeddialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
						blockeddialogcomponentts[label="blocked-dialog.component.ts"];
						blockeddialogcomponentts -> {}


						label="blocked-dialog";
						style=rounded;

					}

					subgraph clusterconfirmdialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
							confirmdialogcomponentts[label="confirm-dialog.component.ts"];
							confirmdialogcomponentts -> {}


						label="confirm-dialog";
						style=rounded;

					}

					subgraph clustercontractinfodialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
								contractinfodialogcomponentts[label="contract-info-dialog.component.ts"];
								contractinfodialogcomponentts -> {databaseservice, contractstructures, connectionstructures, identityservice, identitystructure}


						label="contract-info-dialog";
						style=rounded;

					}

					subgraph clustererrordialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
									errordialogcomponentts[label="error-dialog.component.ts"];
									errordialogcomponentts -> {}


						label="error-dialog";
						style=rounded;

					}

					subgraph clusterinfodialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
										infodialogcomponentts[label="info-dialog.component.ts"];
										infodialogcomponentts -> {databaseservice, contractstructures, connectionstructures, identityservice, identitystructure}


						label="info-dialog";
						style=rounded;

					}

					subgraph clusterinputdialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
											inputdialogcomponentts[label="input-dialog.component.ts"];
											inputdialogcomponentts -> {}


						label="input-dialog";
						style=rounded;

					}

					subgraph clusterlogindialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
												logindialogcomponentts[label="login-dialog.component.ts"];
												logindialogcomponentts -> {userinterfaces}


						label="login-dialog";
						style=rounded;

					}

					subgraph clustersavecontractdialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
													savecontractdialogcomponentts[label="save-contract-dialog.component.ts"];
													savecontractdialogcomponentts -> {}


						label="save-contract-dialog";
						style=rounded;

					}

					subgraph clusterwarningdialog {
												node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
														warningdialogcomponentts[label="warning-dialog.component.ts"];
														warningdialogcomponentts -> {}


						label="warning-dialog";
						style=rounded;

					}


				label="dialogs";
				style=rounded;

			}

			subgraph clusterenums {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
						keyenumts[label="key.enum.ts"];
						keyenumts -> {}


				label="enums";
				style=rounded;

			}

			subgraph clusterinterfaces {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
							connectioninterfacests[label="connection.interfaces.ts"];
							connectioninterfacests -> {}

							contractinterfacests[label="contract.interfaces.ts"];
							contractinterfacests -> {connectioninterfaces, identityinterfaces}

							defaultinterfacests[label="default.interfaces.ts"];
							defaultinterfacests -> {}

							dialoginterfacests[label="dialog.interfaces.ts"];
							dialoginterfacests -> {}

							identityinterfacests[label="identity.interfaces.ts"];
							identityinterfacests -> {}

							keyinterfacests[label="key.interfaces.ts"];
							keyinterfacests -> {}

							namespaceinterfacests[label="namespace.interfaces.ts"];
							namespaceinterfacests -> {}

							settingsinterfacests[label="settings.interfaces.ts"];
							settingsinterfacests -> {}

							transactioninterfacests[label="transaction.interfaces.ts"];
							transactioninterfacests -> {}

							userinterfacests[label="user.interfaces.ts"];
							userinterfacests -> {}

							workflowinterfacests[label="workflow.interfaces.ts"];
							workflowinterfacests -> {}

							workspaceinterfacests[label="workspace.interfaces.ts"];
							workspaceinterfacests -> {}


				label="interfaces";
				style=rounded;

			}

			subgraph clusterpipes {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
								namespipets[label="names.pipe.ts"];
								namespipets -> {ledgerservice, connectionstructures, identityservice, identityinterfaces, connectioninterfaces}

								ntobpipets[label="ntob.pipe.ts"];
								ntobpipets -> {}


				label="pipes";
				style=rounded;

			}

			subgraph clusterservices {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
									apiservicets[label="api.service.ts"];
									apiservicets -> {userinterfaces}

									backupservicets[label="backup.service.ts"];
									backupservicets -> {databaseservice, electronservice, generalservice, dialogservice}

									configservicets[label="config.service.ts"];
									configservicets -> {electronservice}

									consoleservicets[label="console.service.ts"];
									consoleservicets -> {electronservice}

									contractservicets[label="contract.service.ts"];
									contractservicets -> {databaseservice, uploadservice, identityservice, contractstructures, contractinterfaces, identityinterfaces}

									dataservicets[label="data.service.ts"];
									dataservicets -> {defaultsservice, keyservice, namespaceservice, ledgerservice, contractservice, defaultstructures, connectionstructures, contractstructures, keystructures, namespacestructures}

									defaultsservicets[label="defaults.service.ts"];
									defaultsservicets -> {databaseservice, defaultstructures}

									dialogservicets[label="dialog.service.ts"];
									dialogservicets -> {errordialogcomponent, advancedconfirmdialogcomponent, confirmdialogcomponent, warningdialogcomponent, infodialogcomponent, inputdialogcomponent, contractinfodialogcomponent, logindialogcomponent, contractstructures, userinterfaces, blockeddialogcomponent}

									fileservicets[label="file.service.ts"];
									fileservicets -> {electronservice}

									generalservicets[label="general.service.ts"];
									generalservicets -> {electronservice, version, databaseservice, settingsstructures}

									identityservicets[label="identity.service.ts"];
									identityservicets -> {databaseservice, ledgerservice, keyservice, identityinterfaces, connectioninterfaces}

									keyservicets[label="key.service.ts"];
									keyservicets -> {databaseservice, keyinterfaces}

									ledgerservicets[label="ledger.service.ts"];
									ledgerservicets -> {databaseservice, electronservice, connectionstructures, identityinterfaces, keyservice, keyinterfaces}

									namespaceservicets[label="namespace.service.ts"];
									namespaceservicets -> {generalservice, databaseservice, identityservice, ledgerservice, namespacestructures, transactionstructures, identitystructure, namespaceinterfaces, identityinterfaces, connectioninterfaces}

									settingsservicets[label="settings.service.ts"];
									settingsservicets -> {databaseservice, settingsstructures}

									userservicets[label="user.service.ts"];
									userservicets -> {userinterfaces, apiservice, electronservice, userstructure}

									workflowservicets[label="workflow.service.ts"];
									workflowservicets -> {workflowinterfaces, databaseservice, contractinterfaces, saveservice, dialogservice, uploadservice, identityinterfaces}


				label="services";
				style=rounded;

			}

			subgraph clusterstructures {
								node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
										connectionstructurests[label="connection.structures.ts"];
										connectionstructurests -> {connectioninterfaces}

										contractstructurests[label="contract.structures.ts"];
										contractstructurests -> {}

										defaultstructurests[label="default.structures.ts"];
										defaultstructurests -> {defaultinterfaces}

										identitystructurets[label="identity.structure.ts"];
										identitystructurets -> {}

										keystructurests[label="key.structures.ts"];
										keystructurests -> {}

										namespacestructurests[label="namespace.structures.ts"];
										namespacestructurests -> {namespaceinterfaces}

										settingsstructurests[label="settings.structures.ts"];
										settingsstructurests -> {}

										transactionstructurests[label="transaction.structures.ts"];
										transactionstructurests -> {transactioninterfaces}

										userstructurets[label="user.structure.ts"];
										userstructurets -> {userinterfaces}

										workflowstructurests[label="workflow.structures.ts"];
										workflowstructurests -> {workflowinterfaces}


				label="structures";
				style=rounded;

			}


	label="shared";
	style=rounded;

}


	label="app";
	style=rounded;

}

subgraph clusterenvironments {
		node [style="filled,rounded", fillcolor=deepskyblue, shape=box];
	environmentdevts[label="environment.dev.ts"];
	environmentdevts -> {}

	environmentlocalts[label="environment.local.ts"];
	environmentlocalts -> {}

	environmentprodts[label="environment.prod.ts"];
	environmentprodts -> {}

	versionts[label="version.ts"];
	versionts -> {}


	label="environments";
	style=rounded;

}


	label="src";
	style=rounded;

}
}